/**
 * (c) Copyright 2014 WibiData, Inc.
 *
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.kiji.maven.plugins;

import java.io.File;
import java.io.IOException;

import com.google.common.base.Preconditions;
import com.google.common.io.Files;
import org.apache.commons.io.FileUtils;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;

/**
 * Maven goal for starting Bento cluster.
 */
@Mojo(
    name = "start",
    defaultPhase = LifecyclePhase.PRE_INTEGRATION_TEST
)
public final class StartMojo extends AbstractMojo {
  /**
   * Where in the bento-cluster environment are the generated site files stored.
   * TODO: Configure the bento script to write the site files to a pre-specified location.
   */
  private static final String[] SITE_FILE_RELATIVE_PATHS = new String[] {
      "hbase/hbase-site.xml",
      "hadoop/core-site.xml",
      "hadoop/mapred-site.xml",
      "hadoop/yarn-site.xml",
  };

  /**
   * If true, this goal should be a no-op.
   */
  @Parameter(
      property = "bento.skip",
      alias = "bento.skip",
      defaultValue = "false",
      required = false
  )
  private boolean mSkip;

  /**
   * The directory that will store all the configuration *-site.xml files required to connect to
   * HBase, HDFS, and the other Bento cluster components. These files will be generated by the goal.
   */
  @Parameter(
      property = "bento.config.dir",
      alias = "bento.config.dir",
      defaultValue = "${project.build.testOutputDirectory}/",
      required = true
  )
  private File mBentoConfigDir;

  /**
   * Optional bento instance name override. Can be used to use an existing bento instance.
   */
  @Parameter(
      property = "bento.name",
      alias = "bento.name",
      required = false
  )
  private String mBentoName;

  /**
   * Python venv root to install the bento cluster to.
   */
  @Parameter(
      property = "bento.venv",
      alias = "bento.venv",
      defaultValue = "${project.build.directory}/bento-maven-plugin-venv",
      required = false
  )
  private File mBentoVenvRoot;

  /**
   * If true, skips creating the bento instance. Should be used in conjunction with an externally
   * created bento instance through the "bento.name" property.
   */
  @Parameter(
      property = "bento.skip.create",
      alias = "bento.skip.create",
      defaultValue = "false",
      required = false
  )
  private boolean mSkipBentoCreate;

  /**
   * If true, skips starting the bento instance. Should be used in conjunction with an externally
   * created and started bento instance through the "bento.name" property.
   */
  @Parameter(
      property = "bento.skip.start",
      alias = "bento.skip.start",
      defaultValue = "false",
      required = false
  )
  private boolean mSkipBentoStart;

  /**
   * Generate name for Bento cluster container. Bento name is simply the current timestamp. The
   * underlying container's name has "bento-" prepended to this timestamp.
   *
   * @return name for Bento cluster container.
   */
  private static String generateBentoName() {
    return String.format("bento-maven-plugin-%d", System.currentTimeMillis());
  }

  /**
   * Starts the Bento cluster container in a new thread.
   *
   * <p>This method is called by the maven plugin framework to run the goal.</p>
   *
   * @throws MojoExecutionException If there is a fatal error during this goal's execution.
   */
  public void execute() throws MojoExecutionException {
    if (mSkip) {
      getLog().info("Not starting a Bento cluster because bento.skip=true.");
      return;
    }

    if (mSkipBentoStart) {
      getLog().info("Not starting a Bento cluster because bento.skip.start=true.");
      return;
    }

    // Start the cluster.
    final File configDir = Files.createTempDir();
    try {
      BentoCluster.setInstance(
          // If the user hasn't supplied an override, generate a random name.
          mBentoName == null ? generateBentoName() : mBentoName,
          mBentoVenvRoot,
          getLog()
      );
      BentoCluster.getInstance().start(configDir, !mSkipBentoCreate);
    } catch (final Exception e) {
      throw new MojoExecutionException("Unable to start Bento cluster.", e);
    }

    for (final String siteFilePath : SITE_FILE_RELATIVE_PATHS) {
      copySiteFile(new File(configDir, siteFilePath));
    }
  }

  /**
   * Copy a site file generated by the bento script to the location specified by the plugin
   * specification.
   *
   * @param generatedSiteFile is the path to the site file generated by bento to copy.
   * @throws MojoExecutionException if copying the site file or writing to the index file fails.
   */
  private void copySiteFile(final File generatedSiteFile) throws MojoExecutionException {
    try {
      FileUtils.copyFileToDirectory(generatedSiteFile, mBentoConfigDir);
    } catch (final IOException ioe) {
      throw new MojoExecutionException(
          String.format(
              "Copying site file %s to location %s failed.",
              generatedSiteFile.getAbsolutePath(),
              mBentoConfigDir.getAbsolutePath()
          ),
          ioe
      );
    }
    final File writtenFile = new File(mBentoConfigDir, generatedSiteFile.getName());
    Preconditions.checkArgument(writtenFile.exists());
    getLog().info("Wrote config site file: " + writtenFile.getAbsolutePath());

    // We will also append the "conf-index.conf" file with the path to the newly written config
    // site file.
    final File confIndexFile = new File(mBentoConfigDir, "conf-index.conf");
    try {
      FileUtils.write(confIndexFile, writtenFile.getAbsolutePath() + "\n", true);
    } catch (final IOException ioe) {
      throw new MojoExecutionException(
          String.format(
              "Unable to write to configuration index file: %s",
              writtenFile.getAbsolutePath()
          ),
          ioe
      );
    }
    getLog().info("Appended site file path to conf index: " + confIndexFile.getAbsolutePath());
  }
}
